package mh.cld.aws.secu.rbac;

import java.util.Arrays;

import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticatedPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sts.StsClient;
import software.amazon.awssdk.services.sts.auth.StsAssumeRoleWithSamlCredentialsProvider;
import software.amazon.awssdk.services.sts.model.AssumeRoleWithSamlResponse;

@SpringBootApplication
@RestController
public class S3SamlGateway2Application implements CommandLineRunner {
	private String roleArn = "arn:aws:iam::093469567457:role/ADFS-SuperAdmin";
	private String principalArn = "arn:aws:iam::093469567457:saml-provider/production";
	private String samlAssertion = "";

	@Autowired
	private ApplicationContext appContext;

	public void run(String... strings) {
		Arrays.stream(appContext.getBeanDefinitionNames()).forEach(bean -> {
			ToStringStyle style;
			if (bean.toString().startsWith(
					"spring.security.saml2.relyingparty-org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyProperties")) {
				style = new RecursiveToStringStyle();
			} else {
				style = ToStringStyle.JSON_STYLE;
//				style = new RecursiveToStringStyle(); 
			}
			System.out.println("\t" + ReflectionToStringBuilder.toString(appContext.getBean(bean), style, true, true, true, null));
		});
	}

	public static void main(String[] args) {
		SpringApplication.run(S3SamlGateway2Application.class, args);
	}

	@GetMapping("/")
	public String hello(@RequestParam(value = "name", defaultValue = "World") String name,
			@AuthenticationPrincipal Saml2AuthenticatedPrincipal principal) {
		System.out.println(principal.getName());
		principal.getAttributes().forEach((key, list) -> {
			System.out.println(key);
			list.forEach(item -> {
				System.out.println("\t" + item);
			});
		});

		StsAssumeRoleWithSamlCredentialsProvider.builder();
		StsClient stsClient = StsClient.builder().credentialsProvider(AnonymousCredentialsProvider.create())
				.region(Region.EU_WEST_3).build();
		AssumeRoleWithSamlResponse resp = stsClient.assumeRoleWithSAML(builder -> {
//			String originalInput = "test input";
//			String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes());
//			String encodedString2 = Base64.getEncoder().withoutPadding().encodeToString(originalInput.getBytes());
//			String originalUrl = "https://www.google.co.nz/?gfe_rd=cr&ei=dzbFV&gws_rd=ssl#q=java";
//			String encodedUrl = Base64.getUrlEncoder().encodeToString(originalUrl.getBytes());

			String samlAssertionb64 = this.samlAssertion;

			builder.roleArn(roleArn).principalArn(principalArn).samlAssertion(samlAssertionb64);
		});

		System.out.println(resp.credentials().accessKeyId());
		System.out.println(resp.credentials().secretAccessKey());
		System.out.println(resp.credentials().sessionToken());

		return String.format("Hello %s!", name);

	}
}
